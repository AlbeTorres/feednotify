openapi: 3.0.4
info:
  title: FeedNotify API
  description: |-
    This is an API for FeedNotify, a service that allows users to subscribe to various feeds and receive weekly newsletters about updates.
  termsOfService: 'legal.com'
  contact:
    email: albertocorreoficial@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0'
servers:
  - url: coming soon
tags:
  - name: auth
    description: Authentication
  - name: user
    description: User management
  - name: source
    description: Operations related to sources
  - name: newsletter
    description: Operations related to newsletters
  - name: sendNewsletter
    description: Operations related to sending newsletters
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user.
      description: Register a new user.
      operationId: register
      requestBody:
        description: Register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegister'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthUser'
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthUser'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      tags:
        - auth
      summary: Allows a user to login into the API.
      description: Login a user.
      operationId: login
      requestBody:
        description: Login a user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  token:
                    type: string
                    format: jwt
                  data:
                    $ref: '#/components/schemas/AuthUser'
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  token:
                    type: string
                    format: jwt
                  data:
                    $ref: '#/components/schemas/AuthUser'
        '202':
          description: Unverificated email or two-factor authentication token send
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  state:
                    type: string
                    enum: [unverificated_email, two_factor_token_send]
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthUser'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/email-verification:
    post:
      tags:
        - auth
      summary: Verifies whether a user's email is authentic
      description: Verifies a user email.
      operationId: Verifies a user email.
      requestBody:
        description: Verifies a user email.
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token sent to the user's email for verification
              required:
                - token
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/reset-password-email-sender:
    post:
      tags:
        - auth
      summary: Sends a reset password email to the user.
      description: Sends a reset password email to the user.
      operationId: Sends a reset password email to the user.
      requestBody:
        description: Sends a reset password email to the user.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email to send the reset password email
                  format: email
              required:
                - email
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Resets the user's password.
      description: Resets the user's password.
      operationId: Resets the user's password.
      requestBody:
        description: Resets the user's password.
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token sent to the user's email for verification
                password:
                  type: string
                  description: The new password for the user
                  format: password
              required:
                - token
                - password
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /source:
    post:
      tags:
        - source
      summary: Add a new source to the user's sources.
      description: Add a new source.
      operationId: addSource
      requestBody:
        description: Create a new source
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSource'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Source'
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Source'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []

    get:
      tags:
        - source
      summary: Fetch sources by user.
      description: Fetch sources by user.
      operationId: getSourcesByUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
  /source/{id}:
    patch:
      tags:
        - source
      summary: Update an existing source.
      description: Update an existing source by Id.
      operationId: updateSource
      parameters:
        - name: id
          in: path
          description: The id of the source that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent source previously added by the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSource'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Source'
            application/xml:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          description: Invalid ID supplied
        '404':
          description: Source not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
    delete:
      tags:
        - source
      summary: Delete a source by id.
      description: This can only be done by the logged in user.
      operationId: deleteSource
      parameters:
        - name: id
          in: path
          description: The id of the source that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Source deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
        '400':
          description: Invalid username supplied
        '404':
          description: Source not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
    get:
      tags:
        - source
      summary: Get a source by id.
      description: This can only be done by the logged in user.
      operationId: getSourceById
      parameters:
        - name: id
          in: path
          description: The id of the source that needs to be fetched
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Source fetched successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Source'
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Source'
        '400':
          description: Invalid username supplied
        '404':
          description: Source not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
  /source/create-bulk:
    post:
      tags:
        - source
      summary: Add a list of new sources to the user's sources.
      description: Add a list new sources.
      operationId: addBulkSource
      requestBody:
        description: Create new sources
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewSource'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
            application/xml:
              schema:
                $ref: '#/components/schemas/Source'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []

  /newsletter:
    post:
      tags:
        - newsletter
      summary: Create a new newsletter.
      description: Create a new newsletter.
      operationId: createNewsletter
      requestBody:
        description: Create a new newsletter.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewNewsletter'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Newsletter'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
    get:
      tags:
        - newsletter
      summary: Get all the user's newsletters.
      description: Get all the user's newsletters.
      operationId: getNewslettersByUser
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Newsletter'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []

  /newsletter/{id}:
    patch:
      tags:
        - newsletter
      summary: Update a newsletter.
      description: Update a newsletter.
      operationId: updateNewsletter
      parameters:
        - name: id
          in: path
          description: The id of the newsletter that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update a newsletter.
        content:
          application/json:
            schema:
              properties:
                category:
                  type: string
                name:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Newsletter'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
    get:
      tags:
        - newsletter
      summary: Get newsletter by id.
      description: This can only be done by the logged in user.
      operationId: getNewslettersById
      parameters:
        - name: id
          in: path
          description: The id of the newsletter that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfull operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Newsletter'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
    delete:
      tags:
        - newsletter
      summary: Delete a newsletter by id.
      description: This can only be done by the logged in user.
      operationId: deleteNewsletter
      parameters:
        - name: id
          in: path
          description: The id of the newsletter that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Newsletter deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
  /newsletter/{id}/source:
    post:
      tags:
        - newsletter
      summary: Add sources to a newsletter.
      description: Add sources to a newsletter.
      operationId: addSourceNewsletter
      parameters:
        - name: id
          in: path
          description: The id of the newsletter that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Add sources to a newsletter.
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - sourceId
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Newsletter'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
    delete:
      tags:
        - newsletter
      summary: Delete sources from a newsletter.
      description: Delete sources from a newsletter.
      operationId: deleteSourceNewsletter
      parameters:
        - name: id
          in: path
          description: The id of the newsletter that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Delete sources from a newsletter.
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - sourceId
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                    type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Newsletter'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - jwtAuth: []
components:
  schemas:
    AuthUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
          nullable: true
        name:
          type: string
          nullable: true
        role:
          type: string
          enum: [user, admin]
          description: Role of the user, can be either 'user' or 'admin'
      required:
        - id

    AuthLogin:
      type: object
      properties:
        code:
          type: string
          description: Code for two-factor authentication, if required
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    AuthRegister:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
          description: Name of the user
        role:
          type: string
          enum: [user, admin]
          description: Role of the user, can be either 'user' or 'admin'
      required:
        - email
        - password
        - name

    BaseSource:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        type:
          type: string
          enum: [rss, youtube]
          description: type of the source is a string that can be either 'rss' or 'youtube'

    NewSource:
      allOf:
        - $ref: '#/components/schemas/BaseSource'
        - type: object
      required:
        - name
        - url
        - type

    Source:
      allOf:
        - $ref: '#/components/schemas/BaseSource'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            userId:
              type: string
              format: uuid
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    BaseNewsletter:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        sources:
          type: array
          items:
            type: string
            format: uuid
          description: id of the sources to be included in the newsletter

    NewNewsletter:
      allOf:
        - $ref: '#/components/schemas/BaseNewsletter'
        - type: object
      required:
        - name
        - category
        - sources

    Newsletter:
      allOf:
        - $ref: '#/components/schemas/BaseNewsletter'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            userId:
              type: string
              format: uuid
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

    oauth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://yourdomain.com/oauth/authorize
          tokenUrl: https://yourdomain.com/oauth/token
          scopes:
            read: Read access
            write: Write access
